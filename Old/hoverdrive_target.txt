@name Hoverdrive Target
@inputs Reset Forwards Backwards Left Right Up Down
@inputs Teleport
@inputs EntHoverdrive:entity
@outputs VecDirection:vector
@outputs VecTargetPos:vector SetJumpTarget Jump
@persist Commanded
@trigger

interval(500)
runOnChat(1)

VecBaseDirection = vec(0, 0, 0)
LastSpoke = lastSpoke()
Authorized = 0
if (chatClk() & LastSpoke == owner()) {
    LastSaid = lastSaid()
    Authorized = 1
}
if (Authorized) {
    # Parse the command
    if (LastSaid:find(" ")) {
        Command = LastSaid:sub(1, LastSaid:find(" ") - 1)
        Params = LastSaid:sub(LastSaid:find(" ") + 1, LastSaid:length()):trimLeft():trimRight()
    } else {
        Command = LastSaid:sub(1, LastSaid:length())
        Params = ""
    }
    IsCmd = 0
    if (Command:index(1) == "!" | Command:index(1) == "/") {
        IsCmd = 1
        Command = Command:sub(2, Command:length()):lower()
    }
    if (IsCmd) {
        hideChat(1)
        if (Params:length()) {
            EntPlayer = findPlayerByName(Params)
        }
        if (Command == "go") {
            Commanded = 1
        } elseif (Command == "left") {
            VecBaseDirection = vec(10, 0, 0)
        } elseif (Command == "right") {
            VecBaseDirection = vec(-10, 0, 0)
        } elseif (Command == "forwards") {
            VecBaseDirection = vec(0, -10, 0)
        } elseif (Command == "backwards") {
            VecBaseDirection = vec(0, 10, 0)
        } elseif (Command == "up") {
            VecBaseDirection = vec(0, 0, 10)
        } elseif (Command == "down") {
            VecBaseDirection = vec(0, 0, -10)
        } elseif (Command == "player") {
            if (EntPlayer) {
                VecDirection = (EntPlayer:pos() - EntHoverdrive:pos() + vec(0, 0, 512)) / 25.6
                hint("Set location to player \"" + Params + "\".", 10)
            } else {
                hint("Player \"" + Params + "\" not found.", 10)
            }
        }
    }
} else {
    VecTargetPos = EntHoverdrive:pos() + VecDirection * 25.6
    if (clk("interval") | Teleport | Commanded) {
        SetJumpTarget = 1 - SetJumpTarget
        if ((Teleport | Commanded) & VecDirection:length()) {
            Jump = 1
            VecDirection = vec(0, 0, 0)
        } else {
            Jump = 0
        }
    } else {
        if (Reset) {
            VecDirection = vec(0, 0, 0)
        }
        
        if (Forwards) {
            VecBaseDirection = vec(0, -10, 0)
        }
        
        if (Backwards) {
            VecBaseDirection = vec(0, 10, 0)
        }
        
        if (Left) {
            VecBaseDirection = vec(10, 0, 0)
        }
        
        if (Right) {
            VecBaseDirection = vec(-10, 0, 0)
        }
        
        if (Up) {
            VecBaseDirection = vec(0, 0, 10)
        }
        
        if (Down) {
            VecBaseDirection = vec(0, 0, -10)
        }
    }
    Commanded = 0
}

VecBaseDirection = entity():isWeldedTo():toWorld(VecBaseDirection) - entity():isWeldedTo():toWorld(vec(0, 0, 0))
VecDirection += VecBaseDirection
