@name Conway
@inputs Screen:wirelink
@inputs CX CY Use OnScreen
@outputs FrameRate
@persist FrameTimes:array FrameIndex
@persist LastUse LastUseX LastUseY
@persist ActiveList:array SimulatedCells:array
@persist Width Height BPP Pitch
@persist State LastUpdate UpdateInterval
@persist Paused
@persist StateStartTime
@persist X Y I ArrayCount
@persist Data:array
@persist On:array Off:array
@trigger 

interval(10)
runOnChat(1)

if (duped() | first()) {
    BPP = 1
    Width = 64
    Height = 64
    Screen[1048569] = 0
    Screen[1048574] = 1
    Screen[1048574] = 0
    Screen[1048573] = Width
    Screen[1048572] = Height
    Pitch = BPP * Width
    StateStartTime = curtime()
    State = 0
    Paused = 1
    LastUpdate = curtime()
    UpdateInterval = 0.2
    
    FrameTimes:clear()
    FrameIndex = 1
    
    X = 0
    Y = 0
    I = 1
    ActiveList:clear()
    ArrayCount = ActiveList:count()
    SimulatedCells:clear()
    Data:clear()
    On:clear()
    Off:clear()
} elseif (chatClk()) {
    LastSpoke = lastSpoke()
    if (chatClk() & LastSpoke == owner()) {
        LastSaid = lastSaid()
        Authorized = 1
    }
    if (Authorized) {
        # Parse the command
        if (LastSaid:find(" ")) {
            Command = LastSaid:sub(1, LastSaid:find(" ") - 1)
            Params = LastSaid:sub(LastSaid:find(" ") + 1, LastSaid:length()):trimLeft():trimRight()
        } else {
            Command = LastSaid:sub(1, LastSaid:length())
            Params = ""
        }
        IsCmd = 0
        if (Command:index(1) == "!" | Command:index(1) == "/") {
            IsCmd = 1
            Command = Command:sub(2, Command:length()):lower()
        }
        if (IsCmd) {
            hideChat(1)
            if (Command == "pause") {
                if (!Paused) {
                    Paused = 1
                    hint("Paused simulation.", 10)
                }
            } elseif (Command == "unpause") {
                if (Paused) {
                    Paused = 0
                    hint("Unpaused simulation.", 10)
                }
            } elseif (Command == "gun") {
                On:pushVector2(vec2(1, 5))
                On:pushVector2(vec2(2, 5))
                On:pushVector2(vec2(1, 6))
                On:pushVector2(vec2(2, 6))
                
                On:pushVector2(vec2(13, 3))
                On:pushVector2(vec2(14, 3))
                On:pushVector2(vec2(12, 4))
                On:pushVector2(vec2(11, 5))
                On:pushVector2(vec2(11, 6))
                On:pushVector2(vec2(11, 7))
                On:pushVector2(vec2(12, 8))
                On:pushVector2(vec2(13, 9))
                On:pushVector2(vec2(14, 9))
                
                On:pushVector2(vec2(15, 6))
                
                On:pushVector2(vec2(16, 4))
                On:pushVector2(vec2(17, 5))
                On:pushVector2(vec2(17, 6))
                On:pushVector2(vec2(18, 6))
                On:pushVector2(vec2(17, 7))
                On:pushVector2(vec2(16, 8))
                
                On:pushVector2(vec2(25, 1))
                On:pushVector2(vec2(25, 2))
                On:pushVector2(vec2(23, 2))
                On:pushVector2(vec2(21, 3))
                On:pushVector2(vec2(22, 3))
                On:pushVector2(vec2(21, 4))
                On:pushVector2(vec2(22, 4))
                On:pushVector2(vec2(21, 5))
                On:pushVector2(vec2(22, 5))
                On:pushVector2(vec2(23, 6))
                On:pushVector2(vec2(25, 6))
                On:pushVector2(vec2(25, 7))
                
                On:pushVector2(vec2(35, 3))
                On:pushVector2(vec2(36, 3))
                On:pushVector2(vec2(35, 4))
                On:pushVector2(vec2(36, 4))
            }
        }
    }
} else {
    if (Use & OnScreen) {
        RealX = floor(CX * Width)
        RealY = floor(CY * Height)
        if (!LastUse | RealX != LastUseX | RealY != LastUseY) {
            if (Data:number(RealY * Width + RealX)) {
                if (!Off:count() | Off:vector2(Off:count()) != vec2(RealX, RealY)) {
                    Off:pushVector2(vec2(RealX, RealY))
                    Screen[RealY * Pitch + RealX * BPP] = 64
                }
            } else {
                if (!On:count() | On:vector2(On:count()) != vec2(RealX, RealY)) {
                    On:pushVector2(vec2(RealX, RealY))
                    Screen[RealY * Pitch + RealX * BPP] = 128
                }
            }
            LastUseX = RealX
            LastUseY = RealY
        }
        LastUse = 1
    } else {
        LastUse = 0
        LastUseX = -1
        LastUseY = -1
    }
    if (State == -1) {
        # Paused
    } else {
            if (State == 0) {
                while (perf()) {
                    if (I > ArrayCount) {
                        I = 1
                        State++
                        ActiveList:clear()
                        SimulatedCells:clear()
                        break
                    }
                    Pos = ActiveList:vector2(I)
                    X = Pos:x()
                    Y = Pos:y()
                    if (!SimulatedCells[Y * Width + X, number]) {
                        Count = 0
                        Index = (Y - 1) * Width + X - 1
                        Count += Data[Index, number]
                        Index++
                        Count += Data[Index, number]
                        Index++
                        Count += Data[Index, number]
                        Index += Width
                        Count += Data[Index, number]
                        Index -= 2
                        Count += Data[Index, number]
                        Index += Width
                        Count += Data[Index, number]
                        Index++
                        Count += Data[Index, number]
                        Index++
                        Count += Data[Index, number]
                        Cell = Data[Y * Width + X, number]
                        NewCell = 0
                        if (Cell) {
                            if (Count == 2 | Count == 3) {
                                NewCell = 1
                            }
                        } elseif (Count == 3) {
                            NewCell = 1
                        }
                        if (NewCell != Cell) {
                            if (NewCell) {
                                On:pushVector2(vec2(X, Y))
                            } else {
                                Off:pushVector2(vec2(X, Y))
                            }
                        }
                        
                        SimulatedCells[Y * Width + X, number] = 1
                    }
                    I++
                }
            } elseif (State == 1) {
                if (curtime() - LastUpdate > UpdateInterval) {
                    State++
                    ArrayCount = On:count()
                }
            } elseif (State == 2) {
                while (perf()) {
                    if (I > ArrayCount) {
                        I = 1
                        X = 0
                        Y = 0
                        On:clear()
                        State++
                        
                        ArrayCount = Off:count()
                        break
                    }
                    Pos = On:vector2(I)
                    X = Pos:x()
                    Y = Pos:y()
                    ActiveList:pushVector2(vec2(X - 1, Y - 1))
                    ActiveList:pushVector2(vec2(X, Y - 1))
                    ActiveList:pushVector2(vec2(X + 1, Y - 1))
                    ActiveList:pushVector2(vec2(X - 1, Y))
                    ActiveList:pushVector2(vec2(X, Y))
                    ActiveList:pushVector2(vec2(X + 1, Y))
                    ActiveList:pushVector2(vec2(X - 1, Y + 1))
                    ActiveList:pushVector2(vec2(X, Y + 1))
                    ActiveList:pushVector2(vec2(X + 1, Y + 1))
                    Data[Y * Width + X, number] = 1
                    Screen[Y * Pitch + X * BPP] = 255
                    I++
                }
            } elseif (State == 3) {
                while (perf()) {
                    if (I > ArrayCount) {
                        I = 1
                        X = 0
                        Y = 0
                        Off:clear()
                        LastUpdate = curtime()
                        State++
                        break
                    }
                    Pos = Off:vector2(I)
                    X = Pos:x()
                    Y = Pos:y()
                    ActiveList:pushVector2(vec2(X - 1, Y - 1))
                    ActiveList:pushVector2(vec2(X, Y - 1))
                    ActiveList:pushVector2(vec2(X + 1, Y - 1))
                    ActiveList:pushVector2(vec2(X - 1, Y))
                    ActiveList:pushVector2(vec2(X, Y))
                    ActiveList:pushVector2(vec2(X + 1, Y))
                    ActiveList:pushVector2(vec2(X - 1, Y + 1))
                    ActiveList:pushVector2(vec2(X, Y + 1))
                    ActiveList:pushVector2(vec2(X + 1, Y + 1))
                    Data[Y * Width + X, number] = 0
                    Screen[Y * Pitch + X * BPP] = 0
                    I++
                }
            } else {
                if (Paused) {
                    State = 1
                } else {
                    State = 0
                }
                ArrayCount = ActiveList:count()
                FrameTimes[FrameIndex, number] = curtime() - StateStartTime
                FrameIndex++
                if (FrameIndex > 5) {
                    FrameIndex = 1
                }
                FrameRate = 1 / (FrameTimes:sum() / FrameTimes:count())
                StateStartTime = curtime()
            }
        }
}
